@page "/questions"
@inject HttpClient Http
@inject IJSRuntime JSRuntime;

<h1>Questions</h1>

@if (connected == true)
{
    <p><em>Connected to WebSocket</em></p>
}

@if (questions == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Title</th>
                <th>Answer One</th>
                <th>Answer Two</th>
                <th>Answer One Count</th>
                <th>Answer Two Count</th>
            </tr>
        </thead>
        <tbody>
            @{ var i = 0;}  
            @foreach (var question in questions)
            {
                i++;
                if (i == currentCount) {
                <tr>
                    <td>@question.Title</td>
                    <td>@question.Answer1</td>
                    <td>@question.Answer2</td>
                    <td>@question.Answer1Count</td>
                    <td>@question.Answer2Count</td>
                </tr>
                }
            }
        </tbody>
    </table>
<button class="btn btn-primary" @onclick="PreviousQuestion">Previous</button>
<button class="btn btn-primary" @onclick="NextQuestion">Next</button>

}

@code {

   
    private Question[] questions;
    private int currentCount = 1;
    private bool connected = false;

    protected override async Task OnInitializedAsync()
    {
        var r = await JSRuntime.InvokeAsync<string>(
            "blazorHelpers.connect",
            "wss://1dw4ah8x85.execute-api.eu-west-2.amazonaws.com/Prod",
            DotNetObjectReference.Create(this)); 

        if (r == "true"){
            connected = true;
        }
        
        questions = await Http.GetJsonAsync<Question[]>("sample-data/question.json");
    }

    public class Question
    {
        public int Id { get; set; }
        public string Title { get; set; }
        public string Answer1 { get; set; }
        public string Answer2 { get; set; }
        public string Answer1Picture { get; set; }
        public string Answer2Picture { get; set; }
        public int Answer1Count { get; set; }
        public int Answer2Count { get; set; }     
    }

    public class VoteResponse
    {
        public int QuestionId { get; set; }
        public int Answer1 { get; set; }
        public int Answer2 { get; set; }

    }

    private void NextQuestion()
    { 
        if (currentCount < questions.Length ){
            currentCount++;
        }
    }

    private void PreviousQuestion()
    {
        if (currentCount > 1 ){
            currentCount--;
        }
    }

    [JSInvokable]
    public async void OnVote(VoteResponse question){

        var q = questions[question.QuestionId];
        q.Answer1Count += question.Answer1;
        q.Answer2Count += question.Answer2;

        StateHasChanged();
    }




}
