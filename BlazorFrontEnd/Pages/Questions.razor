@page "/questions"
@inject HttpClient Http
@inject IJSRuntime JSRuntime;
@using System.Net.WebSockets
@using System.Text
@using System.Threading
@using Newtonsoft.Json.Linq
@inject Microsoft.Extensions.Configuration.IConfiguration Configuration
@implements IDisposable

<h1>Questions</h1>

@if (connected == true)
{
    <p><em>Connected to WebSocket</em></p>
}

@if (questions == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Title</th>
                <th>Answer One</th>
                <th>Answer Two</th>
                <th>Answer One Count</th>
                <th>Answer Two Count</th>
            </tr>
        </thead>
        <tbody>
            @{ var i = 0;}  
            @foreach (var question in questions)
            {
                i++;
                if (i == currentCount) {
                <tr>
                    <td>@question.Title</td>
                    <td>@question.Answer1</td>
                    <td>@question.Answer2</td>
                    <td>@question.Answer1Count</td>
                    <td>@question.Answer2Count</td>
                </tr>
                }
            }
        </tbody>
    </table>
<button class="btn btn-primary" @onclick="PreviousQuestion">Previous</button>
<button class="btn btn-primary" @onclick="NextQuestion">Next</button>
}

@code {

    CancellationTokenSource disposalTokenSource = new CancellationTokenSource();
    ClientWebSocket webSocket = new ClientWebSocket();
    private Question[] questions;
    private int currentCount = 1;
    private bool connected = false;
    
    protected override async Task OnInitializedAsync()
    {
        await webSocket.ConnectAsync(new Uri(Configuration["websocketurl"]), disposalTokenSource.Token);
        _ = ReceiveLoop();
        
        questions = await Http.GetFromJsonAsync<Question[]>("sample-data/question.json");
    }

    async Task ChangeQuestionAsync(int currentQuestion)
    {
        var payload = $"{{ message: \"slide\", data: \"{currentCount}\" }}";
        var dataToSend = new ArraySegment<byte>(Encoding.UTF8.GetBytes(payload));
        await webSocket.SendAsync(dataToSend, WebSocketMessageType.Text, true, disposalTokenSource.Token);
    }
    
    private void NextQuestion()
    {
        if (currentCount < questions.Length ){
            currentCount++;
        }

        ChangeQuestionAsync(currentCount);
    }

    private void PreviousQuestion()
    {
        if (currentCount > 1 ){
            currentCount--;
        }
        ChangeQuestionAsync(currentCount);
    }
    
    
    async Task ReceiveLoop()
    {
        connected = true;
        var buffer = new ArraySegment<byte>(new byte[1024]);
        while (!disposalTokenSource.IsCancellationRequested)
        {
            var received = await webSocket.ReceiveAsync(buffer, disposalTokenSource.Token);
            var receivedAsText = Encoding.UTF8.GetString(buffer.Array, 0, received.Count);

            try
            {
                JObject json = JObject.Parse(receivedAsText);
                switch (json["message"].Value<string>())
                {
                    case "vote":
                        var qid = json["questionid"].Value<int>();
                        var value = json["questionid"].Value<int>();
                        break;
                    case "other":
                        Console.WriteLine("Other");
                        break;
                }
            }
            catch
            {
                Console.WriteLine("Failed to parse JSON");
            }

            StateHasChanged();
        }
    }

    public void Dispose()
    {
        disposalTokenSource.Cancel();
        _ = webSocket.CloseAsync(WebSocketCloseStatus.NormalClosure, "Bye", CancellationToken.None);
    }

}
